// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  //directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

enum ActivityType {
  RUNNING
  CYCLING
  SWIMMING
  TRIATHLON
}

enum SportType {
  RUNNING
  CYCLING
  SWIMMING
  TRIATHLON
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  profile       Profile?
  trainingUnits TrainingUnit[]
  sessions      Session[]
  accounts      Account[]
  gpsData       GPSData[]
  activities    Activity[]
  events        Event[]
  weightEntries WeightEntry[]

  @@map(name: "users")
}

model Profile {
  id                 String   @id @default(cuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String   @unique
  firstName          String
  lastName           String
  dateOfBirth        DateTime?
  gender             String?
  height             String?
  weight             String?
  fitnessLevel       String?
  trainingHistory    String?
  availableTrainingTime String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model WeightEntry {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  weight    Float
  unit      String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrainingUnit {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  type        String
  description String
  instruction String
  duration    Int
  intensity   String
  date        DateTime
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model GPSData {
  id         Int        @id @default(autoincrement())
  latitude   Float
  longitude  Float
  elevation  Float
  time       DateTime
  pulse      Int?
  watts      Int?
  userId     String
  activityId String?
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity   Activity?  @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("gps_data")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  date        DateTime
  sportType   SportType
  distance    String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("events")
}

model Activity {
  id        String     @id @default(cuid())
  name      String
  activityType  ActivityType
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  gpsData   GPSData[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("activities")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
